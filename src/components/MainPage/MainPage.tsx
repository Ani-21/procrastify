import React, { useState, useEffect } from "react";
import { v4 as uuid } from "uuid";

import { Todo } from "../../Interfaces";
import TodoTask from "../TodoTask/TodoTask";
import Search from "../Search/Search";
import { genericSearch } from "../../utils/genericSearch";
import { genericFilter } from "../../utils/genericFilter";
import TabsGroup, { FilterStatus } from "../TabGroup/TabGroup";
import "./mainPage.sass";

export const MainPage: React.FC = () => {
  // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–π –æ—Ç–¥–µ–ª—å–Ω–æ–π todo
  const [todo, setTodo] = useState<string>("");
  // —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞(–ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)
  const [status, setStatus] = useState<string>("");
  // —Å–ø–∏—Å–æ–∫ todos –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –≤ localStorage
  const [todoList, setTodoList] = useState<Todo[]>(
    JSON.parse(localStorage.getItem("todos")!) || []
  );
  // —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ todo¬†–≤ —Å–ø–∏—Å–∫–µ
  const [query, setQuery] = useState<string>("");
  const [filtered, setFiltered] = useState<FilterStatus>("pending");

  // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π id
  const id: string = uuid();

  // –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è,
  // –¥–∞–Ω–Ω—ã–µ –≤ localStorage —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è
  useEffect(() => {
    localStorage.setItem("todos", JSON.stringify(todoList));
  }, [todoList]);

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {
    setTodo(event.target.value);
  };

  // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ todo
  const addTask = (): void => {
    const newTask = {
      id: id,
      todoName: todo,
      status: status,
    };
    setTodoList([...todoList, newTask]);
    setTodo("");
    console.log(todoList);
  };

  // —É–¥–∞–ª–µ–Ω–∏–µ todo
  const deleteTask = (id: string): void => {
    setTodoList((oldTodoList) => oldTodoList.filter((todo) => todo.id !== id));
  };

  // —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ todo
  const editTask = (id: string, editedTask: string): void => {
    const updatedTodos = todoList.map((todo) => {
      if (todo.id === id) {
        return { ...todo, todoName: editedTask };
      }
      return todo;
    });
    setTodoList(updatedTodos);
  };

  // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ (–Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –≤ –ø–æ–∏—Å–∫–µ) todo
  const resultsTodo = todoList.filter((todo) =>
    genericSearch<Todo>(todo, ["todoName"], query)
  );
  // .filter((todo) => genericFilter<Todo>(todo, filtered));

  return (
    <>
      <div className="header">
        <h1>PROCRASTIFY</h1>
      </div>
      {/*  –û–±–ª–∞—Å—Ç—å —Å–ø–∏—Å–∫–∞ –¥–µ–ª (—Ç–∞–∫–∂–µ –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)*/}
      <div className="input-add-—Åontainer">
        <div className="input-—Åontainer">
          <input
            type="text"
            placeholder="Walk with a dog..."
            name="task"
            value={todo}
            onChange={handleChange}
          />
          <button onClick={addTask}>Add Task</button>
        </div>
      </div>
      <div className="page-wrapper">
        <div className="row">
          <div className="column">
            <div className="container">
              <div className="todo-list-column">Your list of great plans</div>
              <Search onChangeSearchQuery={(query) => setQuery(query)} />
              <div className="todoList">
                {resultsTodo.map((todo: Todo) => (
                  <TodoTask
                    key={todo.id}
                    deleteTask={() => deleteTask(todo.id)}
                    todo={todo}
                    editTask={editTask}
                  />
                ))}
                {resultsTodo.length === 0 && <p>No todos found üò£</p>}
              </div>
            </div>
          </div>

          {/*  –û–±–ª–∞—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ª */}
          <div className="column">
            <div className="container">
              <div className="todo-edit-column">Progress Check</div>
              <TabsGroup
                activeFilter={filtered}
                onFilterChange={(filterStatus) => setFiltered(filterStatus)}
              />
            </div>
          </div>
        </div>
      </div>
    </>
  );
};
